Notes on using the rank.py (student ranking) program.
Ronald L. Rivest
January 16, 2016
------------------------------------------------------

We assume you have grade data for the students in a class, and a
"weight" for each graded component, and that you wish to produce a
listing of the students in order of decreasing overall performance.

Here are the steps to take:

(1) Create a spreadsheet with a header line, a weight line,
    and a number of student grades lines; save it as
    a CSV file.

        STU_ID ,  H1 ,  H2 ,  H3 ,  H4 ,  Q1 ,  Q2 , Final
             0 ,   5 ,   5 ,   5 ,   5 ,  20 ,  20 ,    30
           X99 ,  -- ,   9 ,  10 ,   8 ,  -- ,  87 ,   200
           X94 ,   9 ,   9 ,   9 ,  -- , 100 ,  92 ,   200
           X78 ,   6 ,   8 ,   7 ,   8 ,  52 ,  56 ,   160
           X63 ,   3 ,   5 ,  -- ,   2 ,  63 ,  61 ,   143
           X87 ,   8 ,   9 ,   6 ,  10 ,  84 ,  94 ,   200

    Here we have first a header line giving a name for each of the
    seven columns: a student-id, four homeworks, two quizzes, and
    a final exam.

    Then we have a "weight" line, giving the weight that each
    component (column) should contribute to the final ranking.  Here
    the ID doesn't have any weight, each homework has weight 5, each
    quizzes have weight 20, and the final has weight 30.  The weights
    don't need to sum to 100, although they do here.  Missing weights
    are read as zeros.

    Finally, we have one data line for each student, giving
    their grade for each component, from student X99 (first student)
    to student X87 (last student). 

    Some data items may be missing, and are indicated as "--" in the
    above example.  Any non-numeric value will be treated as
    "missing" and converted to "--" internally.

    This small data set was created with the program make_data.py.
    (E.g. "pypy make_data.py 5 --seed 52")
    You can use make_data.py to create other sample data sets.
    E.g.

         python3 make_data.py 33 >test0033.csv

    creates and saves a test data file for 33 students.

    An example CSV file (for five students) is saved as test0005.csv in the 
    repository.

(2) Edit the program policy.py to specify a policy, if desired, for dropping
    the lowest scores in various categories.  For example, the policy

        DROP_POLICY = [ (2, "H1", "H2", "H3", "H4"),     
                        (1, "Q1", "Q2") ]

    drops the lowest two homeworks and the lowest quiz.  (Here "lowest" means
    lowest in terms of rank-based-score.

(3) Run rank.py on the CSV file:

        python3 rank.py test0005.csv

    There will be output printed on the console, and also three CSV files
    saved with output.

    Here is the output printed to the terminal for our five-student example:

        11:27:39 ranking $ python3 rank.py test0005.csv
        ---------------------------------------------
        -- Student ranking program (rank.py)       --
        -- Version 0.2 (1/15/16) Ronald L. Rivest  --
        ---------------------------------------------
        Reading input file: test0005.csv
        Column names (with weights for those being included in grade):
              STU_ID ------
                  H1 weight 5
                  H2 weight 5
                  H3 weight 5
                  H4 weight 5
                  Q1 weight 20
                  Q2 weight 20
               Final weight 30
        5 students
        --------------------------------------------------------------------------------
        LISTING OF ALL STUDENTS (BEST FIRST) WITH RAW GRADES:
          STU_ID   H1  H2   H3   H4    Q1   Q2  Final  wtd_score  rank 
            X94     9   9    9   --   100   92    200      0.702     1 
            X87     8   9    6   10    84   94    200      0.667     2 
            X99    --   9   10    8    --   87    200      0.613     3 
            X78     6   8    7    8    52   56    160      0.283     4 
            X63     3   5   --    2    63   61    143      0.265     5 
        --------------------------------------------------------------------------------
        test0005.csv.1.grades.rank.csv written.

        --------------------------------------------------------------------------------
        LISTING OF ALL STUDENTS (BEST FIRST) WITH SCALED SCORES:
          STU_ID      H1      H2      H3      H4      Q1      Q2   Final  wtd_score  rank 
            X94    0.800   0.667   0.600      --   0.800   0.667   0.667      0.702     1 
            X87    0.600   0.667   0.200   0.800   0.600   0.833   0.667      0.667     2 
            X99       --   0.667   0.800   0.500      --   0.500   0.667      0.613     3 
            X78    0.400   0.333   0.400   0.500   0.200   0.167   0.333      0.283     4 
            X63    0.200   0.167      --   0.200   0.400   0.333   0.167      0.265     5 
        --------------------------------------------------------------------------------
        test0005.csv.2.scores.rank.csv written.

        Effecting the following drop policy:
            Dropping lowest 2 from: H1 H2 H3 H4
            Dropping lowest 1 from: Q1 Q2
        Recomputing weighted scores and ranks...
        --------------------------------------------------------------------------------
         LISTING OF ALL STUDENTS (BEST FIRST) WITH SCALED AND DROPPED SCORES:
          STU_ID      H1      H2      H3      H4      Q1      Q2   Final  wtd_score  rank 
            X87       --   0.667      --   0.800      --   0.833   0.667      0.733     1 
            X94    0.800   0.667      --      --   0.800      --   0.667      0.722     2 
            X99       --   0.667   0.800      --      --   0.500   0.667      0.622     3 
            X78       --      --   0.400   0.500   0.200      --   0.333      0.308     4 
            X63    0.200      --      --   0.200   0.400      --   0.167      0.250     5 
        --------------------------------------------------------------------------------
        test0005.csv.3.droppedscores.rank.csv written.


The above small example is merely illustrative; our rank-based scoring
method has rather "lumpy" scores when the class is so small.

Given the rank-ordering of the students, the avg_score information,
and any other auxiliary information that may be relevant, the faculty and
staff may then be able to assign grades for the class in an efficient and
reasonable manner.





    





      
