Notes on using the rank.py (student ranking) program.
Ronald L. Rivest
January 9, 2016
------------------------------------------------------

We assume you have grade data for the students in a class, and a
"weight" for each graded component, and that you wish to produce a
listing of the students in order of decreasing overall performance.

Here are the steps to take:

(1) Use your favorite spreadsheet program to Create a CSV file
    with a header line, a weight line, and one student score line
    for each student.

        STU_ID1 ,  H1 ,  H2 ,  H3 ,  Q1 ,  Q2 , Final
              0 ,   5 ,   5 ,   5 ,  20 ,  20 ,    30
         X80826 ,   6 ,   8 ,   8 ,  -- ,  80 ,   185
         X81001 ,   7 ,   7 ,  -- ,  91 ,  74 ,   139
         X81668 ,   6 ,   6 ,   8 ,  79 ,  93 ,   161
         X98883 ,  -- ,  10 ,  10 ,  -- ,  81 ,   200
         X95731 ,   7 ,  10 ,   8 ,  93 , 100 ,   200
         X96332 ,  -- ,  10 ,  -- ,  98 ,  78 ,   172
         X88957 ,   8 ,   8 ,   9 ,  91 ,  83 ,   180

    Here we have first a header line giving a name for each of the
    seven columns, from STU-ID1 to Final.

    Then we have a "weight" line, giving the weight that each
    component (column) should contribute to the final ranking.  Here
    the ID doesn't have any weight, each homework has weight 5, each
    quizzes have weight 20, and the final has weight 30.  The weights
    don't need to sum to 100, although they do here.  Missing weights
    are read as zeros.

    Finally, we have one data line for each student, giving
    their score for each component, from student X80826 (first student)
    to student X88957 (last student). 

    Some data items may be missing, and are indicated as "--" in the
    above example.  However, any non-numeric value will be treated as
    "missing" and converted to "--" internally.

    This small data set was created with the program make_data.py.
    You can use make_data.py to create other sample data sets.
    E.g.

         pypy make_data.py 33 >test0033.csv

    creates and saves a test data file for 33 students.

    An example CSV file (for seven students) is saved as test0007.csv in the 
    repository.

(2) Run rank.py on the CSV file:

        pypy rank.py test0007.csv

    There will be output printed on the console, and also a CSV file
    saved with the output.

    Here is the output printed to the terminal for our seven-student example:

        -- Student ranking program (rank.py)       --
        -- Version 0.2 (1/9/16) Ronald L. Rivest   --
        Reading input file: test0007.csv
        Column names (with weights for those being included in grade):
             STU_ID1 ------
                  H1 weight 5
                  H2 weight 5
                  H3 weight 5
                  Q1 weight 20
                  Q2 weight 20
               Final weight 30
        7 students
        ----------------------------------------------------------------
        LISTING OF ALL STUDENTS (BEST FIRST):
          STU_ID1   H1   H2   H3   Q1    Q2  Final  avg_score  rank 
          X95731     7   10    8   93   100    200      0.252     0 
          X98883    --   10   10   --    81    200      0.295     1 
          X88957     8    8    9   91    83    180      0.464     2 
          X96332    --   10   --   98    78    172      0.511     3 
          X80826     6    8    8   --    80    185      0.518     4 
          X81668     6    6    8   79    93    161      0.654     5 
          X81001     7    7   --   91    74    139      0.766     6 
        ----------------------------------------------------------------


    We interpret the output as follows:
      -- a restatement of the column headers, and their weights
      -- a count of the number of students in the database (7)
      -- a listing of the students in the class, best first, according
         to the ranking found by the program.  The grade components for
         each student are re-stated, followed by the average score for
         that student, followed by the computed rank in class for that student.

         Here student X95731 is "best" and student X81001 is at the bottom.

      -- The output is also written onto a new CSV file, which has the same name
         as the original except with ".1.grades.rank.csv" append.
         (E.g. test0007.csv.1.grades.rank.csv)

             STU_ID1,    H1,    H2,    H3,    Q1,     Q2,  Final,  avg_score,  rank, 
             X95731 ,     7,    10,     8,    93,    100,    200,      0.252,     0, 
             X98883 ,    --,    10,    10,    --,     81,    200,      0.295,     1, 
             X88957 ,     8,     8,     9,    91,     83,    180,      0.464,     2, 
             X96332 ,    --,    10,    --,    98,     78,    172,      0.511,     3, 
             X80826 ,     6,     8,     8,    --,     80,    185,      0.518,     4, 
             X81668 ,     6,     6,     8,    79,     93,    161,      0.654,     5, 
             X81001 ,     7,     7,    --,    91,     74,    139,      0.766,     6, 

         This file is basically identical to the original input file, except
         with two new columns added (avg_score and rank).  This file may be read
         into your favorite spreadsheet program.

      -- Similar output files are written with other output flavors:

             testnnnn.csv.2.scores.rank.csv
                  Same except raw grades replaced by scaled scores.

             testnnnn.csv.3.droppedscores.rank.csv
                  Same as previous except some scores may be dropped by
                  a policy implemented in dropper.py, and then the
                  ranks are recomputed.


Given the rank-ordering of the students, the avg_score information,
and any other auxiliary information that may be relevant, the staff
may then be able to assign grades for the class in an efficient and
reasonable manner.



    





      
