Notes on using the gbv.py (grading by voting) program.
Ronald L. Rivest
January 1, 2016
------------------------------------------------------

We assume that you have grade data for the students in some
class, and a "weight" for each graded component.  We assume
taht you wish to produce a listing of the students in order of
decreasing performance on the components (i.e. a listing with
best student first).

(1) Create a CSV file with a header line, a weight line, and one
    student score line for each student.

        STU_ID1 ,  H1 ,  H2 ,  H3 ,  Q1 ,  Q2 , Final
              0 ,   5 ,   5 ,   5 ,  20 ,  20 ,    30
         X80826 ,   6 ,   8 ,   8 ,  -- ,  80 ,   185
         X81001 ,   7 ,   7 ,  -- ,  91 ,  74 ,   139
         X81668 ,   6 ,   6 ,   8 ,  79 ,  93 ,   161
         X98883 ,  -- ,  10 ,  10 ,  -- ,  81 ,   200
         X95731 ,   7 ,  10 ,   8 ,  93 , 100 ,   200
         X96332 ,  -- ,  10 ,  -- ,  98 ,  78 ,   172
         X88957 ,   8 ,   8 ,   9 ,  91 ,  83 ,   180

    Here we have first a header line giving a name for each of the
    seven columns, from STU-ID1 to Final.

    Then we have a "weight" line, giving the weight that each
    component (column) should contribute to the final ranking.
    Here the ID doesn't have any weight, the homework has weight
    5 per problem set, the quizzes have weight 20 each, and the
    final has weight 30.  The weights don't need to sum to 100,
    although they do here.  Missing weights read as zeros.

    Finally, we have one data line for each student, giving
    the scores on each component, from student X80826 (first student)
    to student X88957 (last student). 

    Some of the data items may be missing.  These are indicated as
    "--" in the above example, but any non-numeric value will be treated
    as "missing" and converted to "--" internally.

    This small data set was created with the program make_data.py.
    You can use make_data.py to create other sample data sets.
    E.g.
         pypy make_data.py 33 > test0033.csv
    creates and saves a test data file for 33 students.

    Such a CSV file (for seven students) is saved as test0007.csv in the 
    repository.

(2) Run gbv.py on the CSV file:

        pypy gbv.py test0007.csv 3

    The name of the CSV file is given, followed by the number of
    minutes to spend optimizing the student order (further tweaking
    to produce improvements in the Kemeny score).

    This treats each column as a preferential ballot.  For example,
    the final exam says:
        X98883 = X95731 > X80826 > X88957 > X96332 > X81668 > X81001
    while H1 says:
        X88957 > X81001 = X95731 > X80826 = X81668
    (Note that missing scores mean the students are just missing from
    those preferential ballots.)  

    Each ballot is replicated a number of times equal to its weight,
    before the vote is tabulated.  For example, a "homework ballot H1"
    is replicated five times before it is "cast".

    There will be output printed on the console, and also another
    CSV file saved with the output.

    Here is the output printed to the terminal:

        -- Grading By Voting (GBV) program.        --
        -- Version 0.1 (12/28/15) Ronald L. Rivest --
        Reading input file: test0007.csv
        Column variable names:
           0: STU_ID1      1:   H1         2:   H2         3:   H3         4:   Q1         5:   Q2     
           6:  Final   
        Components of grade:
               H1  weight 5
               H2  weight 5
               H3  weight 5
               Q1  weight 20
               Q2  weight 20
             Final weight 30
        7 students
        Rating for best ranked-pairs student order: 1130.0
        --------------------------------------------------------------------------------
        LISTING OF ALL STUDENTS (BEST FIRST):
        STU_ID1    H1    H2    H3    Q1    Q2   Final  GBVrank  gap
         X95731    7.0  10.0   8.0  93.0 100.0  200.0        0   15
         X98883     --  10.0  10.0    --  81.0  200.0        1   20
         X88957    8.0   8.0   9.0  91.0  83.0  180.0        2    0
         X80826    6.0   8.0   8.0    --  80.0  185.0        3   45
         X96332     --  10.0    --  98.0  78.0  172.0        4   35
         X81668    6.0   6.0   8.0  79.0  93.0  161.0        5   20
         X81001    7.0   7.0    --  91.0  74.0  139.0        6    0
        --------------------------------------------------------------------------------

    We interpret the output as follows:
      -- a restatement of the column headers, and their weights
      -- a count of the number of students in the database (7)
      -- a "rating" (Kemeny score) for the final order produced (bigger is better)
      -- a listing of the students in the class, best first, according
         to the ranking found by the program.  The grade components for
         each student are re-stated, followed by the rank as computed
         by gbv.py, and then a "gap" field.

         Here student X95731 is "best" and student X81001 is at the bottom.

      -- The "gap field indicates how many more "voters", net, prefer a given
         row to the following row.  This field is given as it may be helpful
         when assigning grades to know when adjacent students in the listing should
         be considered as "really quite similar" (zero or small gap) or "quite
         different" (large gap).

         For example, consider the students of rank 1 and rank 2 (i.e. X98883 and
         X88957).  Student 1 wins 5 votes each for H2 and H3 (and H1 doesn't count
         since student 1 missed it), since student 1 has higher scores (10 and 10)
         than student 2 (8 and 9) on those assignments.  Student 1 also gains 30
         votes on the final, but loses 20 on Q2.  (Q1 doesn't count since it was
         missed by student 1.)  Thus student 1 is up by 5+5+30-20 = 20 (the "gap").

         The gaps will always be nonnegative, when they are small (or zero), a given
         student is ranked as "essentially the same" (or the same) as the following
         students.  In our example, student 2 (X88957) is ranked the same as
         student 3.  These students should be given the same grade.

         But there is a bigger gap (45) between the students of rank 3 (X80826) and
         rank 4 (X96332).  Thus, giving these two students different grades might
         make sense.

      -- The output is also written onto a new CSV file, which has the same name
         as the original except with ".gbv.csv" append.  (E.g. test0007.csv.gbv.csv)
         
             STU_ID1 ,  H1 ,  H2 ,  H3 ,  Q1 ,  Q2 , Final,GBVrank,gap,
             0,5,5,5,20,20,30,0,0,
              X95731 ,7.0,10.0,8.0,93.0,100.0,200.0,0,15,
              X98883 ,,10.0,10.0,,81.0,200.0,1,20,
              X88957 ,8.0,8.0,9.0,91.0,83.0,180.0,2,0,
              X80826 ,6.0,8.0,8.0,,80.0,185.0,3,45,
              X96332 ,,10.0,,98.0,78.0,172.0,4,35,
              X81668 ,6.0,6.0,8.0,79.0,93.0,161.0,5,20,
              X81001 ,7.0,7.0,,91.0,74.0,139.0,6,0,

          This file is basically identical to the original input file, except
          with two new columns added (GBVrank and gap).  This file may be read
          into your favorite spreadsheet program.

Given the rank-ordering of the students, the gap information, and any other auxiliary
information that may be relevant, the staff may be able to assign grades for the class
in an efficient and reasonable manner.



    





      
